
A brief guide to making and reviewing pull requests.

1. It works
-----------

The code does what it's supposed to! Have a test, and if it's feasible, read through the code to understand what it's doing.

2. Doesn't break anything else
------------------------------

IPython has to work on:

* Linux of various kinds, Windows & Mac
* Python 2 & 3
* Alternative Python interpreters, such as PyPy & IronPython.

Also, any code that handles user input should be unicode aware. `This article <http://www.joelonsoftware.com/articles/Unicode.html>`_ is a good intro to unicode.

Running the automated test suite is a good start, but it's not everything. In particular, the test suite will only tell you about the platform you run it on.

3. Clean & commented
--------------------

When you look at the code, it should be clear (to a Python programmer) what it's doing and why. We try to stick to `PEP 8 style <http://www.python.org/dev/peps/pep-0008/>`_ as much as practical - indentation is four spaces, variables are ``lower_case`` except ``Classes``.

4. Comes with tests
-------------------

If it fixes a bug, the pull request should ideally add an automated test that fails without the fix, and passes with it. Normally it should be sufficient to copy an existing test and tweak it. New functionality should come with its own tests as well.

5. Well documented
------------------

Don't forget to update docstrings, and any relevant parts of `the manual <http://ipython.org/ipython-doc/stable/index.html>`_. New features or significant changes warrant an entry in the *What's New* section too.
